
<Window x:Class="Demka_test.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Demka_test"
        mc:Ignorable="d"
        Title="Вход" Height="500" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="1" VerticalAlignment="Center" Height="236">
            <Label Content="Логин" HorizontalAlignment="Left" Margin="54,42,0,0" VerticalAlignment="Top"/>
            <Label Content="Пароль" HorizontalAlignment="Left" Margin="54,118,0,0" VerticalAlignment="Top"/>
            <TextBox x:Name="loginText" HorizontalAlignment="Left" Margin="112,46,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="120"/>
            <PasswordBox x:Name="passwordText" HorizontalAlignment="Left" Margin="112,123,0,0" VerticalAlignment="Top" Width="120"/>
            <Button x:Name="btnLogin" Content="Войти" HorizontalAlignment="Center" Margin="0,189,0,0" VerticalAlignment="Top" Width="84" Height="37" Click="btnLogin_Click" />

        </Grid>

    </Grid>
</Window>




using Amazon.SimpleSystemsManagement;
using Amazon.SimpleSystemsManagement.Model;
using Demka_test.Pages;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reactive;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Demka_test
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
           
        }

        private void btnLogin_Click(object sender, RoutedEventArgs e)
        {
            string login = loginText.Text;
            string password = passwordText.Password;

            var context = Helper.GetContext();

            try
            {
                var user = context.Users.SingleOrDefault(u => u.login == login && u.password == password);

                if (user != null)
                {
                    var role = context.TypeRole.SingleOrDefault(r => r.idTypeRole == user.idTypeRole);
                    if (role != null)
                    {
                        MessageBox.Show($"Добро пожаловать, {user.fio}! Ваша роль: {role.typeRole1}");

                        var specialistWindow = new specialistWindowOrder(user.fio, role.typeRole1);
                        specialistWindow.Show();
                        this.Close();
                    }
                    else
                    {
                        MessageBox.Show("Ошибка определения роли пользователя.");
                    }
                }
                else
                {
                    // ToolTip toolTip = new ToolTip();
                    // toolTip.Content = "Неверный логин или пароль!";
                    // loginText.ToolTip = toolTip;

                    MessageBox.Show("Неверный логин или пароль!");
                    // MessageBox.Show("Повторить попытку?", "Ошибка", MessageBoxButton.YesNo);
                    // MessageBox.Show("Продолжить?", "Ошибка", MessageBoxButton.OKCancel);
                }
            }
            finally
            {
               
            }
        }
    }
}


________________________________________________________________________________________________

Вывод чего-то и переход


<Window x:Class="Demka_test.Pages.specialistWindowOrder"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Demka_test.Pages"
        mc:Ignorable="d"
        Title="Сервисный центр 'IT-Сфера'" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="6*"/>
            <RowDefinition Height="1*"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Horizontal" >
            <TextBox x:Name="tbSerach" TextWrapping="Wrap" Width="240" Margin="10" TextChanged="tbSerach_TextChanged"/>
            <ComboBox x:Name="cmdSort" Width="220" Margin="10" SelectionChanged="cmdSort_SelectionChanged">
                <ComboBoxItem Content="Сортировать по возрастанию" />
                <ComboBoxItem Content="Сортировать по убыванию" />
            </ComboBox>
            <ComboBox x:Name="cmdFilter"  Width="220" Margin="10" SelectionChanged="cmdFilter_SelectionChanged">
                <ComboBoxItem Content="Все типы приборов" />
                <ComboBoxItem Content="Кондиционер" />
                <ComboBoxItem Content="Увлажнитель воздуха" />
                <ComboBoxItem Content="Сушилка для рук" />

                <ComboBoxItem Content="В процессе ремонта" />
                <ComboBoxItem Content="Готова к выдаче" />
                <ComboBoxItem Content="Новая заявка" />
            </ComboBox>

        </StackPanel>

        <ListView x:Name="OrderListView" Grid.Row="1" Margin="10">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Border>
                        <StackPanel>
                            <StackPanel>
                                <TextBlock Text="{Binding isRequest, StringFormat='Заявка: {0}'}"/>
                                <TextBlock Text="{Binding startDate, StringFormat='Начальная дата: {0:d}'}"/>
                            </StackPanel>
                            <TextBlock Text="{Binding climateTechModel, StringFormat='Модель: '}"/>
                            <TextBlock Text="{Binding climateTechTypes.climateTechType, StringFormat='Тип модели: '}"/>
                            <TextBlock Text=""/>
                            <TextBlock Text="{Binding requestStatus.requestStatus1, StringFormat='Статус: '}"/>
                            <TextBlock Text="{Binding completionDate, StringFormat='Дата выполнения: {0:d}'}"/>
                            <TextBlock Text=""/>
                            <TextBlock Text="{Binding Users.fio, StringFormat='Заказчик: {0}'}"/>
                            <TextBlock Text="{Binding Users.phone, StringFormat='Номер заказчика: {0}'}"/>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <StackPanel  Grid.Row="2" Orientation="Horizontal">
            <Button x:Name="btnAddRequest" Content="Создать заявку" Margin="10" Click="btnAddRequest_Click"/>
            <Button x:Name="btnDeleteRequest"  Content="Удалить заявку" Margin="10" Click="btnDeleteRequest_Click"/>
            <Button x:Name="btnEditRequest"  Content="Редактировать заявку" Margin="10" Click="btnEditRequest_Click"/>
        </StackPanel>
    </Grid>
</Window>





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data.Entity;


namespace Demka_test.Pages
{
    /// <summary>
    /// Логика взаимодействия для specialistWindowOrder.xaml
    /// </summary>
    public partial class specialistWindowOrder : Window
    {
        public string UserName { get; set; }
        public string UserRole { get; set; }
        private List<Requests> _allRequests;

        public specialistWindowOrder(string userName, string userRole)
        {
            InitializeComponent();
            UserName = userName;
            UserRole = userRole;
            LoadData();
        }
        private void LoadData()
        {
            if (UserRole == "Менеджер" || UserRole == "Специалист" || UserRole == "Оператор")
            {
                btnAddRequest.Visibility = Visibility.Visible;
                btnDeleteRequest.Visibility = Visibility.Visible;
                btnEditRequest.Visibility = Visibility.Visible;
            }
            else
            {
                btnDeleteRequest.Visibility = Visibility.Hidden;
                btnEditRequest.Visibility = Visibility.Hidden;
            }

            var context = Helper.GetContext();

            var requests = context.Requests
                .Include(r => r.climateTechTypes)
                .Include(r => r.requestStatus)
                .Include(r => r.Users)
                .ToList();

            _allRequests = requests;
            OrderListView.ItemsSource = requests;
        }



        private void tbSerach_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                var textBox = sender as TextBox;
                if (textBox == null)
                {
                    return;
                }
                else
                {
                    string searchText = textBox.Text.ToLower();
                    var filteredList = _allRequests.Where(r =>
                        r.isRequest.ToString().Contains(searchText) ||
                        r.climateTechModel.ToLower().Contains(searchText) ||
                        r.problemDescryption.ToLower().Contains(searchText) ||
                        r.startDate.ToString().Contains(searchText) ||
                        (r.idRequestStatus == 1 && "В процессе ремонта".ToLower().Contains(searchText)) ||
                        (r.idRequestStatus == 2 && "Готова к выдаче".ToLower().Contains(searchText)) ||
                        (r.idRequestStatus == 3 && "Новая заявка".ToLower().Contains(searchText))).ToList();

                    OrderListView.ItemsSource = filteredList;
                }
            }
            catch (Exception ex)
            {

                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }

        private void cmdSort_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (cmdSort.SelectedItem == null)
            {
                return;
            }
            else
            {
                var selectSort = (cmdSort.SelectedItem as ComboBoxItem)?.Content.ToString();
                var filteredRequests = FilterRequests();

                if (selectSort == "Сортировать по возрастанию") 
                {
                    filteredRequests = filteredRequests.OrderBy(r => r.isRequest).ToList();
                } else if (selectSort == "Сортировать по убыванию") 
                {
                    filteredRequests = filteredRequests.OrderByDescending(r => r.isRequest).ToList();
                }

                OrderListView.ItemsSource = filteredRequests;
            }
        }

        private void cmdFilter_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (cmdFilter.SelectedItem == null)
            {
                return;
            }
            else 
            {
                var filteredRequests = FilterRequests();
                OrderListView.ItemsSource = filteredRequests;
            }

        }

        private List<Requests> FilterRequests()
        {
            var selectedFilter = (cmdFilter.SelectedItem as ComboBoxItem)?.Content.ToString();
            var filteredRequests = _allRequests;

            if (selectedFilter == "Кондиционер")
            {
                filteredRequests = filteredRequests.Where(r => r.climateTechTypes.climateTechType == "Кондиционер").ToList();
            }
            else if (selectedFilter == "Увлажнитель воздуха")
            {
                filteredRequests = filteredRequests.Where(r => r.climateTechTypes.climateTechType == "Увлажнитель воздуха").ToList();
            }
            else if (selectedFilter == "Сушилка для рук")
            {
                filteredRequests = filteredRequests.Where(r => r.climateTechTypes.climateTechType == "Сушилка для рук").ToList();
            }
            else if (selectedFilter == "В процессе ремонта")
            {
                filteredRequests = filteredRequests.Where(r => r.requestStatus.requestStatus1 == "В процессе ремонта").ToList();
            }
            else if (selectedFilter == "Готова к выдаче")
            {
                filteredRequests = filteredRequests.Where(r => r.requestStatus.requestStatus1 == "Готова к выдаче").ToList();
            }
            else if (selectedFilter == "Новая заявка")
            {
                filteredRequests = filteredRequests.Where(r => r.requestStatus.requestStatus1 == "Новая заявка").ToList();
            }

            return filteredRequests;
        }

        //Добавить переход для обычного пользоваеля и спрятать некоторые элементы.
        private void btnAddRequest_Click(object sender, RoutedEventArgs e)
        {
            if (OrderListView.SelectedItem is Requests selectedRequest)
            {
                AddAndEditAndDeleteRequestWindow editWindow = new AddAndEditAndDeleteRequestWindow(selectedRequest.isRequest);
                editWindow.Show();
                LoadData();
            }

        }

        private void btnDeleteRequest_Click(object sender, RoutedEventArgs e)
        {
            try 
            {
                if (OrderListView.SelectedItems is Requests selectedRequest)
                {
                    MessageBoxResult result = MessageBox.Show($"Вы уверенны, что хотите удалить: №{selectedRequest.isRequest}?", "Подтвердить удаление", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    if (result == MessageBoxResult.Yes) 
                    { 
                    
                        var dbContext = Helper.GetContext();

                        var requestToDelete = dbContext.Requests.FirstOrDefault(r => r.isRequest == selectedRequest.isRequest);

                        if (requestToDelete != null) 
                        {
                            dbContext.Requests.Remove(requestToDelete);
                            dbContext.SaveChanges();
                            LoadData();
                            MessageBox.Show("Заявка успешна удалена!", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);

                        }
                    }
                }
                else 
                {
                    MessageBox.Show("Пожалуйста, выберите заявку для удаления", "Предупреждение!", MessageBoxButton.OK, MessageBoxImage.Warning);
                }

            }
            catch (Exception ex) 
            {
                MessageBox.Show($"Произошла ошибка при удалении заявки: {ex.Message}","Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        //Добавить переход для обычного пользоваеля и спрятать некоторые элементы.
        private void btnEditRequest_Click(object sender, RoutedEventArgs e)
        {
            if (OrderListView.SelectedItem is Requests selectedRequest)
            {
                AddAndEditAndDeleteRequestWindow editWindow = new AddAndEditAndDeleteRequestWindow(selectedRequest.isRequest, UserRole);
                editWindow.Show();
                LoadData();
            }
        }

        private void btnExit_Click(object sender, RoutedEventArgs e)
        { 
            MainWindow mainWindow = new MainWindow(); // Создание нового экземпляра MainWindow
            mainWindow.Show(); // Показать окно MainWindow
            this.Close();
        }

    
        private void OrderListView_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {

            if (OrderListView.SelectedItem is Requests selectedRequest)
            {
                AddAndEditAndDeleteRequestWindow editWindow = new AddAndEditAndDeleteRequestWindow(selectedRequest.isRequest, UserRole);
                editWindow.Show();
                LoadData();
            }
        }

        private void OrderListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (OrderListView.SelectedItem is Requests selectedRequest)
            {
                AddAndEditAndDeleteRequestWindow editWindow = new AddAndEditAndDeleteRequestWindow(selectedRequest.isRequest, UserRole);
                editWindow.Show();
                LoadData();
            }
        }

        private void btnStaticWindow_Click(object sender, RoutedEventArgs e)
        {
            StaticsWindow staticsWindow = new StaticsWindow(); // Создание нового экземпляра MainWindow
            staticsWindow.Show(); // Показать окно MainWindow
            this.Close();
        }
    }
}


________________________________________________________________________________________________


Редактирование\Добавление\удаление



<Window x:Class="Demka_test.Pages.AddAndEditAndDeleteRequestWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Demka_test.Pages"
        mc:Ignorable="d"
        Title="Заказы" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="150"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Label Grid.Row="0" Grid.Column="0" Content="Номер заявки:"/>
        <TextBox Grid.Row="0" Grid.Column="1" x:Name="RequestNumberTextBox" IsReadOnly="True"/>

        <Label Grid.Row="1" Grid.Column="0" Content="Дата добавления:"/>
        <DatePicker Grid.Row="1" Grid.Column="1" x:Name="StartDatePicker"/>

        <Label Grid.Row="2" Grid.Column="0" Content="Тип оборудования:"/>
        <ComboBox Grid.Row="2" Grid.Column="1" x:Name="ClimateTechTypeComboBox"/>

        <Label Grid.Row="3" Grid.Column="0" Content="Модель:"/>
        <TextBox Grid.Row="3" Grid.Column="1" x:Name="ClimateTechModelTextBox"/>

        <Label Grid.Row="4" Grid.Column="0" Content="Описание проблемы:"/>
        <TextBox Grid.Row="4" Grid.Column="1" x:Name="ProblemDescriptionTextBox" 
                 AcceptsReturn="True" Height="60" VerticalScrollBarVisibility="Auto"/>

        <Label x:Name="CustomerLabel" Grid.Row="5" Grid.Column="0" Content="ФИО заказчика:"/>
        <ComboBox Grid.Row="5" Grid.Column="1" x:Name="CustomerComboBox"/>

        <Label x:Name="RequestStatusLabel" Grid.Row="6" Grid.Column="0" Content="Статус заявки:"/>
        <ComboBox Grid.Row="6" Grid.Column="1" x:Name="RequestStatusComboBox"/>

        <Label x:Name="MasterLabel" Grid.Row="7" Grid.Column="0" Content="Мастер:"/>
        <ComboBox Grid.Row="7" Grid.Column="1" x:Name="MasterComboBox" />

        <Label  x:Name="CompletionDatePickerLabel"  Grid.Row="8" Grid.Column="0" Content="Дата завершения:"/>
        <DatePicker x:Name="CompletionDatePicker" Grid.Row="8" Grid.Column="1" />

        <Label x:Name="RepairPartsLabel" Grid.Row="9" Grid.Column="0" Content="Комментарии:"/>
        <TextBox x:Name="RepairPartsTextBox"  Grid.Row="9" Grid.Column="1" AcceptsReturn="True" Height="60" VerticalScrollBarVisibility="Auto"/>

        <StackPanel Grid.Row="10" Grid.Column="1" Orientation="Horizontal" 
                   HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="SaveButton" Content="Сохранить" Width="100" Margin="0,0,10,0" Click="SaveButton_Click" Height="53"/>
            <Button x:Name="CancelButton" Content="Отмена" Width="100" Click="CancelButton_Click" Height="55"/>
        </StackPanel>
 
    </Grid>
</Window>



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Demka_test.Pages
{
    /// <summary>
    /// Логика взаимодействия для AddAndEditAndDeleteRequestWindow.xaml
    /// </summary>
    public partial class AddAndEditAndDeleteRequestWindow : Window
    {
        private Entities dbContext;
        private Requests currentRequest;
        private string UserRole;

        public AddAndEditAndDeleteRequestWindow(int idRequest = 0, string userRole = "")
        {
            InitializeComponent();
            dbContext = new Entities();
            UserRole = userRole;

            SetElementVisibility();

            LoadComboBoxes();
            if (idRequest > 0)
            {
                LoadRequestData(idRequest);
            }
        }

        private void LoadComboBoxes()
        {
            ClimateTechTypeComboBox.ItemsSource = dbContext.climateTechTypes.ToList();
            ClimateTechTypeComboBox.DisplayMemberPath = "climateTechType";

            CustomerComboBox.ItemsSource = dbContext.Users.Where(u => u.idTypeRole == 4).ToList();
            CustomerComboBox.DisplayMemberPath = "fio";

            MasterComboBox.ItemsSource = dbContext.Users.Where(u => u.idTypeRole == 2).ToList();
            MasterComboBox.DisplayMemberPath = "fio";


            RequestStatusComboBox.ItemsSource = dbContext.requestStatus.ToList();
            RequestStatusComboBox.DisplayMemberPath = "requestStatus1";

        }

        private void LoadRequestData(int idRequest)
        {
            currentRequest = dbContext.Requests.Find(idRequest);
            if (currentRequest != null)
            {
                RequestNumberTextBox.Text = currentRequest.isRequest.ToString();
                StartDatePicker.SelectedDate = currentRequest.startDate;
                ClimateTechTypeComboBox.SelectedItem = dbContext.climateTechTypes.FirstOrDefault(t => t.idClimateTechType == currentRequest.idclimateTechType);
                ClimateTechModelTextBox.Text = currentRequest.climateTechModel.ToString();
                ProblemDescriptionTextBox.Text = currentRequest.problemDescryption.ToString();

                CompletionDatePicker.SelectedDate = currentRequest.completionDate;

                RepairPartsTextBox.Text = currentRequest.repairParts?.ToString();

                if (currentRequest.idUser.HasValue)
                {
                    CustomerComboBox.SelectedItem = dbContext.Users.FirstOrDefault(u => u.idUser == currentRequest.idUser);
                }

                if (currentRequest.idMaster.HasValue)
                {
                    MasterComboBox.SelectedItem = dbContext.Users
                        .FirstOrDefault(u => u.idUser == currentRequest.idMaster);
                }
                if (currentRequest.idRequestStatus.HasValue)
                {
                    RequestStatusComboBox.SelectedItem = dbContext.requestStatus
                        .FirstOrDefault(s => s.idRequestStatus == currentRequest.idRequestStatus);
                }
            }
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (currentRequest == null)
                {
                    currentRequest = new Requests();
                    dbContext.Requests.Add(currentRequest);
                }

                currentRequest.startDate = StartDatePicker.SelectedDate;
                currentRequest.climateTechModel = ClimateTechModelTextBox.Text;
                currentRequest.problemDescryption = ProblemDescriptionTextBox.Text;

                // Добавьте сохранение новых полей
                currentRequest.completionDate = CompletionDatePicker.SelectedDate;
                currentRequest.repairParts = RepairPartsTextBox.Text;

                var selectedTechType = ClimateTechTypeComboBox.SelectedItem as climateTechTypes;
                currentRequest.idclimateTechType = selectedTechType?.idClimateTechType;

                var selectedCustomer = CustomerComboBox.SelectedItem as Users;
                currentRequest.idUser = selectedCustomer?.idUser;

                var selectedMaster = MasterComboBox.SelectedItem as Users;
                currentRequest.idMaster = selectedMaster?.idUser;

                var selectedStatus = RequestStatusComboBox.SelectedItem as requestStatus;
                currentRequest.idRequestStatus = selectedStatus?.idRequestStatus;

                dbContext.SaveChanges();
                MessageBox.Show("Данные успешно сохранены!");
                this.Close();

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при сохранении: {ex.Message}", "Ошибка", MessageBoxButton.YesNo);
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {

        }


        private void SetElementVisibility()
        {
            if (UserRole != "Менеджер" && UserRole != "Специалист" && UserRole != "Оператор")
            {
                MasterComboBox.Visibility = Visibility.Collapsed;
                CustomerComboBox.Visibility = Visibility.Collapsed;
                RepairPartsTextBox.Visibility = Visibility.Collapsed;
                RequestStatusComboBox.Visibility = Visibility.Collapsed;
                CompletionDatePicker.Visibility = Visibility.Collapsed;

                MasterLabel.Visibility = Visibility.Collapsed; 
                CustomerLabel.Visibility = Visibility.Collapsed; 
                RepairPartsLabel.Visibility = Visibility.Collapsed;
                RequestStatusLabel.Visibility = Visibility.Collapsed;
                CompletionDatePickerLabel.Visibility = Visibility.Collapsed;
            }

        }
    }
}


______________________________________________________________________________________________

<Window x:Class="Demka_test.Pages.StaticsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Demka_test.Pages"
        mc:Ignorable="d"
        Title="StaticsWindow" Height="450" Width="800">
    <Grid>
        <TextBlock Text="Количество выполненных заявок:" Margin="10"/>
        <TextBlock x:Name="CompletedRequestsCount" Margin="200,10,0,0"/>

        <TextBlock Text="Среднее время выполнения заявки(часах):" Margin="10,40,0,0"/>
        <TextBlock x:Name="AverageCompletionTime" Margin="258,40,-58,0"/>

        <TextBlock Text="Статистика по типам неисправностей:" Margin="10,70,0,0"/>
        <ListBox x:Name="ProblemStatistics" Margin="10,100,190,130" Height="200"/>
    </Grid>
</Window>









using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Demka_test.Pages
{
    /// <summary>
    /// Логика взаимодействия для StaticsWindow.xaml
    /// </summary>
    public partial class StaticsWindow : Window
    {
        private List<Requests> requests;

        public StaticsWindow()
        {
            InitializeComponent();
            LoadStatistics();
        }

        private void LoadStatistics()
        {
            var context = Helper.GetContext();

            // Количество выполненных заявок
            var completedRequestsCount = context.Requests.Count(r => r.idRequestStatus == 2);
            CompletedRequestsCount.Text = completedRequestsCount.ToString();

            // Среднее время выполнения заявки
            var completedRequests = context.Requests.Where(r => r.idRequestStatus == 2 && r.completionDate.HasValue && r.startDate.HasValue).ToList();

            double averageCompletionTime = completedRequests.Average(r => (r.completionDate.Value - r.startDate.Value).TotalHours);

            AverageCompletionTime.Text = averageCompletionTime.ToString();

            // Статистика по типам неисправностей
            var problemStatistics = context.Requests.GroupBy(r => r.problemDescryption).Select(g => new { Problem = g.Key, Count = g.Count() }).ToList();

            ProblemStatistics.ItemsSource = problemStatistics;
            ProblemStatistics.DisplayMemberPath = "Problem";
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Demka_test
{
  
    internal class Helper
    {
        public static Entities ent;

        public static Entities GetContext()
        {
            if (ent == null)
            {
                ent = new Entities();
            }
            else { 
                return ent;
            }
            return ent;
        }

    }
}
